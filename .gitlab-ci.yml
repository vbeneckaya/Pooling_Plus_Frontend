stages:
  - build
  - deploy

before_script:
  - docker login -u $LOGIN_REGISTRY -p $PASS_REGISTRY $REGISTRY_HOST || true
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa 10.10.5.10 >> ~/.ssh/known_hosts

  
build-frontend-dev:
  stage: build
  script:
    - docker build -t alternative-tms-front:develop -f ./docker/front/Dockerfile .
    - docker tag alternative-tms-front $REGISTRY_HOST/alternative-tms/alternative-tms-front:develop
    - docker push $REGISTRY_HOST/tealsy/alternative-tms-front:develop
  only:
   - master    

build-frontend-prod:
  stage: build
  script:
    - docker build -t alternative-tms-front:prod -f ./docker/front/Dockerfile .
    - docker tag alternative-tms-front $REGISTRY_HOST/alternative-tms/alternative-tms-front:prod
    - docker push $REGISTRY_HOST/tealsy/alternative-tms-front:prod
  only:
   - master  
  
build-frontend-dev:
  variables:
    SSH_USER:  server
    SSH_HOST:  10.10.5.10
    SSH_OPT:   -o StrictHostKeyChecking=no
    SSH_LINE: ssh $SSH_OPT $SSH_USER@$SSH_HOST
  stage: deploy
  script:
    - cd /opt/alternative-tms ; docker pull fmcpreg.azurecr.io/tealsy/alternative-tms-front:develop; docker-compose -f docker-compose.yml up -d --force-recreate alternative-tms-front
 # environment:
 #   name: 

build-frontend-prod:    
  variables:
    SSH_USER: server
    SSH_HOST: 10.10.5.10
    SSH_OPT:   -o StrictHostKeyChecking=no
    SSH_LINE: ssh $SSH_OPT $SSH_USER@$SSH_HOST
  stage: deploy
  script:
    - cd /opt/alternative-tms ; docker pull fmcpreg.azurecr.io/tealsy/alternative-tms-front:prod; docker-compose -f docker-compose.yml up -d --force-recreate alternative-tms-front
 # environment:
 #   name:
